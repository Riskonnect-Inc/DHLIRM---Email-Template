<!-- Mike Ulveling -->
<apex:component access="global" allowDml="true">
    <apex:attribute name="relList" type="pRelatedList" required="true" description="." access="global" />
    
    <apex:attribute name="path" type="String" required="false" default="'#root'" description="full path to the direct parent cnode" />
    <apex:attribute name="ident" type="String" required="false" default="" description="identifies this specific related list among others" />
    <apex:attribute name="dialogIdent" type="String" required="false" default="" description="identifies this specific dialog set among multiples that may occur for the same related list" />
    
    <!-- !! Note that for some reason Visualforce breaks down when an actionRegion is encapsulated around each dialog. In general,
            it seems to have major bugs/issues with its handling of actionRegions inside of custom components. However, it seems to handle
            a single top-level actionRegion in a custom component. Move the actionRegion outside of the component definition if this too
            becomes problematic -->
    <apex:actionRegion >
    
    <!-- instantiates the cnode instance and writes its reference into $cnode.last -->
    <script type="text/javascript">
        $cnode({!path}, 'relatedList {!ident}', 'addDialog {!dialogIdent}');
        $cnode({!path}, 'relatedList {!ident}', 'editDialog {!dialogIdent}');
        $cnode({!path}, 'relatedList {!ident}', 'deleteDialog {!dialogIdent}');
        // set the parent relatedList cnode into $cnode.last:
        $cnode({!path}, 'relatedList {!ident}');
    </script>
    
    <!-- we allow componentBody scripts, e.g. for setting up the "loaded" queue -->
    <apex:componentBody />
    
    <!-- Add -->
    <apex:outputPanel id="a" layout="block" rendered="{!NOT(ISNULL(relList.addAspect))}">
        <apex:variable var="addProps" value="{!relList.addAspect.dialog.props}" />
        <div id="{!addProps.outerDivDomId}">
            <div id="{!addProps.innerDivDomId}" class="{!addProps.styles.OuterBar}" dialogKey="{!addProps.dialogKey}" doNotDragDescendents="true">
                <div class="{!addProps.styles.OuterBaz}" dialogKey="{!addProps.dialogKey}">
                    <span style="display:none">
                        <apex:outputPanel id="addSave">
                            <apex:actionSupport event="onfocus" action="{!relList.invokeAddSave}" 
                                    rerender="{!relList.curryRerender}"/>
                        </apex:outputPanel>
                        <script type="text/javascript">
                            (function() {
                                // define the core element and action aspects of this component-type's API:
                                var cnode = $cnode({!path}, 'relatedList {!ident}', 'addDialog {!dialogIdent}', { 
                                    reset: "elements actions",
                                    
                                    // component writers are responsible for defining the element aspects of a component type:
                                    elements: {
                                        // properties that have string values starting with "j_id<digit>" are interpreted as a DOM-id and are resolved to a DOM
                                        // node (via document.getElementById) in the cnode API's getElements() result:
                                        top: "{!$Component.a}"
                                    },
                                    
                                    // component writers are also responsible for defining the action aspects of a component type:
                                    actions: {
                                        open: function() {
                                            _uiManager.openDialog("{!JSENCODE(relList.addDialog.key)}");
                                        },
                                        
                                        save: function() {
                                            _uiManager.validateActiveDialog(
                                                function() {
                                                    _uiManager.submitDialog({
                                                            "message": "Saving...",
                                                            "action": function() {
                                                                // here we don't need to supply any dynamic submitProps, because the server-side remembers the itemId from the preceding addLoad action: 
                                                                compApi.actions.submit();
                                                            },
                                                            "shortMessage": "Saving..."
                                                        })
                                                });
                                        },
                                        
                                        submit: {
                                            binding: "{!$Component.addSave}",
                                            parameters: {
                                                // addSave rerender is a bit tricky: we must rerender the grid in addition to this dialog:
                                                curryRerender: 
                                                    function() {
                                                        return String([cnode.getComponentApi().elements.top, cnode.parent(".relatedList").find(".grid").getComponentApi().elements.dataLoader]);
                                                    }
                                            },
                                            oncomplete: 
                                                function () {
                                                    _uiManager.fireDialogSubmitFinished();
                                                }
                                        }
                                    }
                                });
                                
                                var compApi = cnode.getComponentApi();
                            })();
                        </script>
                    </span>
                    
                    <c:pDialogStdAddEdit aspect="{!relList.addAspect}" fullPath="{!path}, 'relatedList {!ident}', 'addDialog {!dialogIdent}'" /> 
                    <script type="text/javascript">
                        (function() {
                            var cnode = $cnode({!path}, 'relatedList {!ident}', 'addDialog {!dialogIdent}'),
                                dialogKey = "{!relList.addDialog.key}",
                                dialogMgr = _uiManager.getDialogManagerByKey(dialogKey);
                            dialogMgr.unbind(".relatedList").bind("contentReady.relatedList",
                                function() {
                                    cnode.triggerBoth("dialogReady", dialogMgr);
                                });
                            cnode.triggerBoth("parse");
                        })();
                    </script>
                </div>
            </div>
        </div>
    </apex:outputPanel>
    
    <!-- Edit -->
    <apex:outputPanel id="e" layout="block" rendered="{!NOT(ISNULL(relList.editAspect))}">
        <apex:variable var="editProps" value="{!relList.editAspect.dialog.props}" />
        <div id="{!editProps.outerDivDomId}">
            <div id="{!editProps.innerDivDomId}" class="{!editProps.styles.OuterBar}" dialogKey="{!editProps.dialogKey}" doNotDragDescendents="true">
                <div class="{!editProps.styles.OuterBaz}" dialogKey="{!editProps.dialogKey}">
                    <span style="display:none">
                        <apex:outputPanel id="editLoad">
                            <apex:actionSupport event="onfocus" action="{!relList.invokeEditLoad}" 
                                    rerender="{!relList.curryRerender}"/>
                        </apex:outputPanel>
                        <apex:outputPanel id="editSave">
                            <apex:actionSupport event="onfocus" action="{!relList.invokeEditSave}" 
                                    rerender="{!relList.curryRerender}"/>
                        </apex:outputPanel>
                        
                        <script type="text/javascript">
                            (function() {
                                var cnode = $cnode({!path}, 'relatedList {!ident}', 'editDialog {!dialogIdent}', { 
                                    reset: "elements actions",
                                    
                                    elements: {
                                        top: "{!$Component.e}"
                                    },
                                    
                                    actions: {
                                        open: function(itemId) {
                                            _uiManager.openDialog("{!JSENCODE(relList.editDialog.key)}", {
                                                "message": "Loading...",
                                                "action":
                                                    function() {
                                                        // find the editDialog cnode that's associated with this grid:
                                                        cnode.getComponentApi().actions.load({
                                                            parameters: {
                                                                itemId: itemId
                                                            }
                                                        });
                                                    },
                                                "shortMessage": "Loading..."
                                            });
                                        },
                                        
                                        load: {
                                            binding: "{!$Component.editLoad}",
                                            parameters: {
                                                curryRerender: "{!$Component.e}"
                                            },
                                            oncomplete: 
                                                function () {
                                                    _uiManager.fireDialogContentsLoaded();
                                                }
                                        },
                                        
                                        save: function() {
                                            _uiManager.validateActiveDialog(
                                                function() {
                                                    _uiManager.submitDialog({
                                                            "message": "Saving...",
                                                            "action": function() {
                                                                // here we don't need to supply any dynamic submitProps, because the server-side remembers the itemId from the preceding editLoad action: 
                                                                compApi.actions.submit();
                                                            },
                                                            "shortMessage": "Saving..."
                                                        })
                                                });
                                        },
                                        
                                        submit: {
                                            binding: "{!$Component.editSave}",
                                            parameters: {
                                                // editSave rerender is a bit tricky: we must rerender the grid in addition to this dialog:
                                                curryRerender: 
                                                    function() {
                                                        return String([cnode.getComponentApi().elements.top, cnode.parent(".relatedList").find(".grid").getComponentApi().elements.dataLoader]);
                                                    }
                                            },
                                            oncomplete: 
                                                function () {
                                                    _uiManager.fireDialogSubmitFinished();
                                                }
                                        }
                                    }
                                });
                                
                                var compApi = cnode.getComponentApi();
                            })();
                        </script>
                    </span>
                    
                    <c:pDialogStdAddEdit aspect="{!relList.editAspect}" fullPath="{!path}, 'relatedList {!ident}', 'editDialog {!dialogIdent}'" />
                        <script type="text/javascript">
                            (function() {
                                var cnode = $cnode({!path}, 'relatedList {!ident}', 'editDialog {!dialogIdent}'),
                                    dialogKey = "{!relList.editDialog.key}",
                                    dialogMgr = _uiManager.getDialogManagerByKey(dialogKey);
                                dialogMgr.unbind(".relatedList").bind("contentReady.relatedList",
                                    function() {
                                        cnode.triggerBoth("dialogReady", dialogMgr);
                                    });
                                cnode.triggerBoth("parse");
                            })();
                        </script>
                </div>
            </div>
        </div>
    </apex:outputPanel>
    
    <!-- Delete -->
    <apex:outputPanel id="d" layout="block" rendered="{!NOT(ISNULL(relList.deleteAspect))}">
        <apex:variable var="delProps" value="{!relList.deleteAspect.dialog.props}" />
        <div id="{!delProps.outerDivDomId}">
            <div id="{!delProps.innerDivDomId}" class="{!delProps.styles.OuterBar}" dialogKey="{!delProps.dialogKey}" doNotDragDescendents="true">
                <div class="{!delProps.styles.OuterBaz}" dialogKey="{!delProps.dialogKey}">
                    <span style="display:none">
                        <apex:outputPanel id="deleteSave">
                            <apex:actionSupport event="onfocus" action="{!relList.invokeDeleteSave}" 
                                    rerender="{!relList.curryRerender}"/>
                        </apex:outputPanel>
                        <script type="text/javascript">
                            (function() {
                                var cnode = $cnode({!path}, 'relatedList {!ident}', 'deleteDialog {!dialogIdent}', { 
                                    reset: "elements actions",
                                    
                                    elements: {
                                        top: "{!$Component.d}"
                                    },
                                    
                                    actions: {
                                        open: function(itemId) {
                                            _uiManager.activeDeleteItemId = itemId;
                                            _uiManager.openDialog("{!JSENCODE(relList.deleteDialog.key)}");
                                        },
                                        
                                        save: function() {
                                            _uiManager.submitDialog({
                                                "message": "Deleting...",
                                                "action": 
                                                    function() {
                                                        // here we must supply the itemId as a dynamic submitProp, because the delete dialog is open-immediate and doesn't have a
                                                        // preceding load action to store an itemId server-side:
                                                        compApi.actions.submit({
                                                            parameters: {
                                                                // !! we rely upon the dialog-open script (in each RelatedList grid row's Delete link) to stash the appropriate
                                                                //    activeItemId in the _uiManager.activeDeleteItemId variable:
                                                                itemId: _uiManager.activeDeleteItemId
                                                            }
                                                        });
                                                    },
                                                "shortMessage": "Deleting..."
                                            })
                                        },
                                        
                                        submit: {
                                            binding: "{!$Component.deleteSave}",
                                            parameters: {
                                                // deleteSave rerender is a bit tricky: we must rerender the grid in addition to this dialog:
                                                curryRerender: 
                                                    function() {
                                                        return String([cnode.getComponentApi().elements.top, cnode.parent(".relatedList").find(".grid").getComponentApi().elements.dataLoader]);
                                                    }
                                            },
                                            oncomplete:
                                                function () {
                                                    _uiManager.fireDialogSubmitFinished();
                                                }
                                        }
                                    }
                                });
                                
                                var compApi = cnode.getComponentApi();
                            })();
                        </script>
                        
                    </span>
                    
                    <c:pDialogStdDelete aspect="{!relList.deleteAspect}" fullPath="{!path}, 'relatedList {!ident}', 'deleteDialog {!dialogIdent}'" />
                    <script type="text/javascript">
                        (function() {
                            var cnode = $cnode({!path}, 'relatedList {!ident}', 'deleteDialog {!dialogIdent}'),
                                dialogKey = "{!relList.deleteDialog.key}",
                                dialogMgr = _uiManager.getDialogManagerByKey(dialogKey);
                            dialogMgr.unbind(".relatedList").bind("contentReady.relatedList",
                                function() {
                                    cnode.triggerBoth("dialogReady", dialogMgr);
                                });
                            cnode.triggerBoth("parse");
                        })();
                    </script>
                </div>
            </div>
        </div>
    </apex:outputPanel>
    
    </apex:actionRegion>
    
</apex:component>