<!-- Mike Ulveling -->
<apex:component layout="block">
    <apex:attribute name="relList" type="pRelatedList" required="true" description="." />
    <apex:attribute name="addLinkLabel" type="String" required="true" description="." />
    
    <apex:attribute name="path" type="String" required="false" default="'#root'" description="full path to the direct parent cnode" />
    <apex:attribute name="ident" type="String" required="false" default="" description="identifies this specific related list among others" />
    <apex:attribute name="gridIdent" type="String" required="false" default="" description="identifies this specific grid among multiples that may occur for the same related list" />
    
    <apex:actionRegion >
    
    <!-- instantiates the cnode instance and writes its reference into $cnode.last -->
    <!-- 
    <script type="text/javascript">
        $cnode({!path}, 'relatedList {!ident}', 'grid genericSearch {!gridIdent}');
    </script>
    <apex:componentBody />
    -->

    <apex:outputPanel id="grid" layout="block"
        style="padding: 5px 0px 0px 0px;">

        <div style="padding:0 0 5px 3px;">
            <rkl:FormActionLink id="addLink" label="{!addLinkLabel}" actionFunction="$cnode({!path}, 'relatedList {!ident}').find('.addDialog').getComponentApi().actions.open()" />
        </div>
        
        <script type="text/javascript">
            $cnode({!path}, "relatedList {!ident}", {
                elements: {
                    addLink: "{!$Component.addLink}"
                }
            });
        </script>
        
        <rkl:GenericSearchResults search="{!relList.gridSearch}" path="{!path}, 'relatedList {!ident}'" ident="grid {!gridIdent}">
            <!-- inject a custom renderer for the column at modelIndex=0: hijack whatever column this is and render it as Edit|Delete links: -->
            <script type="text/javascript">
                (function($) {
                    var gsResultsNode = $cnode.last,
                        relListNode = gsResultsNode.closest(".relatedList");
                    
                    gsResultsNode.offOnSelf("beforeDataLoad", 
                        function(evt, data) {
                            var gridApi = gsResultsNode.getComponentApi().elements.gridApi;
                            // hide/show the grid depending on whether it has any body rows:
                            if (data.body && (!$.isArray(data.body) || data.body.length === 0)) {
                                // the rkl:GenericSearchResults logic looks for this flag and skips the gridApi.load call if the flag value is truthy.
                                // here we set it so that we don't inadvertently waste any "auto~" col widths when there is no body data to render:
                                // 
                                // !! this can cause problems because client components depend a lot on the "dataLoad" event:
                                data.cancelLoad = true;
                                
                                // !! this is pretty hack-y; it can be used by clients to detect when the related list grid is empty, because this
                                // cancel will leave the old (stale) rows intact:
                                gridApi.grid.addClass("relList-empty");
                                
                                // TODO: move this trigger into rkl:GenericSearchResults
                                gsResultsNode.triggerBoth("cancelDataLoad", data);
                                
                                gridApi.grid.hide();
                            } else {
                                gridApi.grid.removeClass("relList-empty");
                                gridApi.grid.show();
                        
                                data.cellRenderers = $.extend(data.cellRenderers, {
                                    0: function(cellData, context, superCall) {
                                        var rowIndex = context.rowIndex,
                                            rowId = context.rowMeta[rowIndex].id;
                                        
                                        $(this).empty();
                                        
                                        var inlineWrap = $('<span>').appendTo(this);
                                        
                                        $('<a>').text("Edit").appendTo(inlineWrap).click(
                                            function() {
                                                relListNode.find(".editDialog").getComponentApi().actions.open(rowId);
                                            });
                                        
                                        $('<span>&nbsp;|&nbsp;</span>').appendTo(inlineWrap);
                                        
                                        $('<a>').text("Delete").appendTo(inlineWrap).click(
                                            function() {
                                                relListNode.find(".deleteDialog").getComponentApi().actions.open(rowId);
                                            });
                                    }
                                });
                            }
                            
                            // the GenericSearch model provides us with metadata for each column in the data.context object:
                            var meta = data.context.fieldMeta;
                            if ($.isArray(meta)) {
                                // here we set custom cell decorators (1 per column) right into the data object, before it is loaded by gridLayout.
                                // we could also write a row decorator to e.g. write record-id's into the <tr> rows. we could also write custom cell
                                // renderers; renderers written as an override into the data object (i.e. under the props "headerCellRenderers" and
                                // "cellRenderers") have highest precedence; they always override renderers configured on the column and/or grid:
                                data.headerCellDecorators = [];
                                data.cellDecorators = [];
                                for (var i=0; i < meta.length; i++) {
                                    data.headerCellDecorators[i] = data.cellDecorators[i] = 
                                        (function(metaObj) {
                                            // a cell decorator gets the relevant <th> or <th> element as its thisBinding:
                                            return function() {
                                                $(this)
                                                    .attr("field-path", metaObj.path)
                                                    .attr("soap-type", metaObj.soapType);
                                            };
                                        })(meta[i]);
                                }
                            }
                        });
                    
                })(jQuery);
            </script>
            
            <apex:componentBody />
        </rkl:GenericSearchResults>
        
    </apex:outputPanel>
    
    <!-- signal that we've finished the parsing and initial scripting setup (i.e. gridLayout shell) of this component -->
    <!-- 
    <script type="text/javascript">
        $cnode({!path}, "relatedList {!ident}", "grid {!gridIdent}")
            .triggerBoth("parse");
    </script>
    -->
    
    </apex:actionRegion>
</apex:component>