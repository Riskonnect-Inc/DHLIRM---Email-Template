<!---- ****************************************************************
                        Added to RK base RMIS product as   06/01/2015
                        Revised December 2016 in RK release 2016.2
           ******************************************************************* -->
<apex:page standardController="Claim__c" extensions="ChangeClaimStatusPopupController" showHeader="false" sidebar="false">
    <head>
        <apex:includeScript value="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></apex:includeScript>
        <apex:includeScript value="//code.jquery.com/ui/1.11.1/jquery-ui.js"></apex:includeScript>
        <apex:stylesheet value="//code.jquery.com/ui/1.11.1/themes/smoothness/jquery-ui.css"></apex:stylesheet>
        
        <apex:form >
    <apex:pageBlock >
        <apex:pageBlockSection title="Current account record Id is :{!$User.Id}" id="uid" collapsible="false" rendered="false">
        </apex:pageBlockSection>
        </apex:pageBlock>
  </apex:form>
        
        <script type="text/javascript">
            ;(function($) {
            
            Array.prototype.contains = function ( fld) {
                for (var i in this) {
                    if (this[i] == fld) return true;
                }
                return false;
            }
                $.widget.bridge('uibutton', $.ui.button);
                $.widget.bridge('uitooltip', $.ui.tooltip);
               
            })(jQuery);
        </script>
        <apex:includeScript value="{!$Resource.TimePickerAddon_JS}"></apex:includeScript>
        <apex:stylesheet value="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css"></apex:stylesheet>
        <apex:stylesheet value="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css"></apex:stylesheet>
        <apex:includeScript value="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></apex:includeScript>
        <apex:includeScript value="{!URLFOR($Resource.BS3_Dialog, 'dist/js/bootstrap-dialog.min.js')}"></apex:includeScript>
        <apex:stylesheet value="{!URLFOR($Resource.BS3_Dialog, 'dist/css/bootstrap-dialog.min.css')}"></apex:stylesheet>
        <apex:includeScript value="{!URLFOR($Resource.FloatTHead_JS, 'FloatThead/dist/jquery.floatThead.min.js')}"></apex:includeScript>
        <apex:stylesheet value="{!$Resource.RKPage_CSS}"></apex:stylesheet>
        <apex:includeScript value="{!$Resource.RKPage_JS}"></apex:includeScript>
        <style type="text/css">
            div.loadingWindow {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: white;
                z-index: 10;
            }

            div.loadingWindow > div {
                text-align: center;
                font-weight: bold;
            }
        </style>
        <script type="text/javascript">
            var __sfdcSessionId = '{!GETSESSIONID()}';
            
            
        </script>
        <script src="/soap/ajax/31.0/connection.js" type="text/javascript"></script>
        <script type="text/javascript">
            
            
           
            
            
            //Comment this line out to cut-off all debugging
            //rkAPI.StaticUtils.enableDebugging();

            var refreshOpener = function() {
                if (window.opener && window.opener.postMessage) {
                    window.opener.postMessage("REFRESH PAGE NOW", "*");
                } else if (window.parent && window.parent.postMessage) {
                    window.parent.postMessage("REFRESH PAGE NOW", "*");
                }
            };
            //console.log('rl apu --'+JSON.stringify(rkAPI));
            
            var log = rkAPI.log;
            var error = rkAPI.error;

            

            var showLoading = function(newText) {
                if (newText) {
                    $("#loadingWindowMsg").text(newText);
                } else {
                    $("#loadingWindowMsg").text("Loading...");
                }
                $("#loadingWindow").show();
            };

            var hideLoading = function() {
                $("#loadingWindow").hide();
            };

            var showErrorMessage = function(message) {
                var outerArgs = arguments;
                $("#errorMessage").append($("<div/>").css("text-align", "center").css("font-size", "").text(message)).show();
                if (outerArgs.length > 1) {
                    var buttonContainer = $("<div/>").css({
                        "margin-left": "auto",
                        "margin-right": "auto",
                        "margin-top": "10px",
                        "text-align": "center"
                    }).appendTo($("#errorMessage"));

                    $.each(outerArgs, function(argIndex, argVal) {
                        if (argIndex > 0 && argVal.action) {
                            var newButton = $("<button/>").addClass("bootstrap-btn-mod btn-primary").text(argVal.label).click(function() {
                                argVal.action.apply(argVal.action, arguments);
                            }).appendTo(buttonContainer);
                        }
                    });
                }
            };

            var hideErrorMessage = function() {
                $("#errorMessage").hide();
            };

            var objectName = "Claim__c";
            var transactionObjectName = "Claim_Transaction__c";
            
            var currentClaimId = "{!currentRecord.Id}";
            var currentClaim;
            var latestTransactionDate;
            var layoutFields;
            var fieldDescribes;
            var claimRecordTypes = {!claimRecordTypeMapJSON};
            var claimTransactionRecordTypes = {!claimTransRecordTypeMapJSON};
            var controller = ChangeClaimStatusPopupController;

            var screenFlowConfig;

            var showCompletionScreen = function(completionMessage) {
                var completionContainer = $("<div/>").addClass("panel panel-primary").append(
                    $("<div/>").addClass("panel-heading").text("Status Changed Successfully!")
                ).append(
                    $("<div/>").addClass("panel-body").text(completionMessage)
                ).append(
                    $("<div/>").addClass("panel-footer clearfix").append(
                        $("<button/>").addClass("bootstrap-btn-mod btn-primary btn-right").text("OK").click(
                            function() {
                                refreshOpener();
                                window.close();
                            }
                        )
                    )
                );

                pageBody.empty().append(completionContainer);
            };

            var createScreenFlowConfig = function() {
                screenFlowConfig = {
                    Incident: {
                        Open: {
                            formTitle: "Open Claim Form",
                            formFields: (function() {
                                var formConfig = {};
                                $.each(layoutFields.open_claim_field_set, function(fieldIndex, fieldName) {
                                    formConfig[fieldName] = rkAPI.StaticUtils.createFieldFromDescribe(fieldDescribes[fieldName]);
                                });
                                if (formConfig["date_opened__c"]) {
                                    formConfig["date_opened__c"].hasValidValue(function(currentDateClosed) {
                                        if (latestTransactionDate) {
                                            if (currentDateClosed.diff(latestTransactionDate) < 0) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }, "Open Date must be >= " + latestTransactionDate.toISOString().split("T")[0]);
                                }
                                return formConfig;
                            })(),
                            formButtonConfig: {
                                buttonLabels: [/*"New Reserve", */"Convert to Claim", "Cancel"],
                                buttonHandlers: [/*{
                                    postUpdate: function(submittedValues) {
                                        //TODO: CREATE NEW RESERVE TRANSACTION AND REDIRECT TO IT
                                        //var claimTransFieldNames = ["claim__c", "recordtypeid"];
                                        //rkAPI.toolingAPI.getFieldId(objectName, claimTransFieldNames, function(fieldIds) {
                                            
                                        //});
                                        //TODO: Close current window and redirect parent to new reserve transaction "New" page
                                        log("'Incident' Claim set to 'Open'");
                                    }
                                },*/ {
                                    postUpdate: function(submittedValues) {
                                        hideLoading();
                                        showCompletionScreen("This incident has been successfully converted to a claim.");
                                    }
                                }, {
                                    preUpdate: function() {
                                        window.close();
                                    }
                                }]
                            },
                            getClaimData: function(submittedValues, submittedValues2) {
                                var claimData = {
                                    status__c: "Open"
                                };
                                $.each(submittedValues, function(name, value) {
                                    claimData[name] = value;
                                });
                                $.each(submittedValues2, function(name, value) {
                                    claimData[name] = value;
                                });
                                return claimData;
                            },
                            getTransactionData: function(submittedValues, submittedValues2) {
                                $.extend(submittedValues, submittedValues2);
                                var transactionData = {
                                    approval_status__c: {
                                        value: "Approved"
                                    },
                                    claim__c: {
                                        type: "lookup",
                                        value: currentClaimId
                                    },
                                    amount__c: {
                                        value: 0.00
                                    },
                                    name: {
                                        value: "Incident to Claim Transaction"
                                    },
                                    recordtypeid: {
                                        type: "lookup",
                                        value: claimTransactionRecordTypes.Reserve
                                    },
                                    transaction_date__c: {
                                        type: "date",
                                        value: moment().utc().valueOf()
                                    },
                                    transaction_status__c: {
                                        value: "Open"
                                    },
                                    type__c: {
                                        value: "Reserve"
                                    },
                                    category__c: {
                                        value: "Status Change"
                                    }
                                };

                                return [transactionData];
                            }
                        },
                        
                        Void: {
                            formTitle: "Void Claim Form",
                            formFields: (function() {
                                var formConfig = {};
                                $.each(layoutFields.void_claim_field_set, function(fieldIndex, fieldName) {
                                    formConfig[fieldName] = rkAPI.StaticUtils.createFieldFromDescribe(fieldDescribes[fieldName]);
                                });
                                if (formConfig["void_dt__c"]) {
                                    formConfig["void_dt__c"].hasValidValue(function(currentVoidDate) {
                                        if (latestTransactionDate) {
                                            if (currentVoidDate.diff(latestTransactionDate) < 0) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }, "Void Date must be >= " + latestTransactionDate.toISOString().split("T")[0]);
                                }
                                return formConfig;
                            })(),
                            formButtonConfig: {
                                buttonLabels: ["Void Claim", "Cancel"],
                                buttonHandlers: [{
                                    postUpdate: function(submittedValues) {
                                        //TODO: Look at the VoidClaimProduct trigger and VoidClaimDelegate class and recreate that logic here
                                        //TODO: Close current window and refresh parent
                                        hideLoading();
                                        log("'Incident' Claim set to 'Void'");
                                        //refreshOpener();
                                        //window.close();
                                        showCompletionScreen("This incident has been successfully voided.");
                                    }
                                    }, {
                                    preUpdate: function() {
                                        window.close();
                                    }
                                }]
                            },
                            getClaimData: function(submittedValues, submittedValues2) {
                                var claimData = {
                                    status__c: "Void",
                                    void_dt__c: moment(new Date()).utc().valueOf()
                                };
                                $.each(submittedValues, function(name, value) {
                                    claimData[name] = value;
                                });
                                $.each(submittedValues2, function(name, value) {
                                    claimData[name] = value;
                                });
                                return claimData;
                            },
                            getTransactionData: function() {
                                return [];
                            }
                        }
                    },
                    Open: {
                        Closed: {
                            formTitle: "Close Claim Form",
                            formFields: (function() {
                                var formConfig = {};
                                $.each(layoutFields.closed_claim_field_set, function(fieldIndex, fieldName) {
                                    formConfig[fieldName] = rkAPI.StaticUtils.createFieldFromDescribe(fieldDescribes[fieldName]);
                                });
                                if (formConfig["date_closed__c"]) {
                                    formConfig["date_closed__c"].hasValidValue(function(currentDateClosed) {
                                        if (latestTransactionDate) {
                                            if (currentDateClosed.diff(latestTransactionDate) < 0) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }, "Close Date must be >= " + latestTransactionDate.toISOString().split("T")[0]);
                                }
                                formConfig["Close_All_Open"] = new rkAPI.CheckboxBooleanField("Close All Open Tasks");
                                return formConfig;
                            })(),
                            formButtonConfig: {
                                buttonLabels: ["Close Claim", "Cancel"],
                                buttonHandlers: [{
                                    postUpdate: function(submittedValues) {
                                        showLoading("Updating Claim...");
                                        var $closeOpenTasksDeferred = $.Deferred();

                                        $closeOpenTasksDeferred.done(function() {
                                            hideLoading();
                                            log("'Open' Claim set to 'Closed'");
                                            if ('{!currentProfile}' != 'System Administrator' && submittedValues["Close_All_Open"].value === true)
                                            {
                                            showCompletionScreen("This claim has been successfully closed. Only Open Tasks assigned to you have been Closed.");
                                            }
                                            
                                            else {
                                            showCompletionScreen("This claim has been successfully closed.");}
                                                                                        
                                        });

                                        if (submittedValues["Close_All_Open"].value === true) {
                                            ChangeClaimStatusPopupController.closeAllOpenTasks(currentClaimId,'{!$User.Id}', function(response, event) {
                                                if (event.status) {
                                                
                                                if(response ==null)
                                                 {
                                                    $closeOpenTasksDeferred.resolve();
                                                } 
                                                else
                                                {
                                                 hideLoading();
                                            log("'Open' Claim set to 'Closed'");
                                            showCompletionScreen("Claim has been successfully Closed.");
                                                //showCompletionScreen("This cannot be closed."); You do not have permission to close all Open Tasks.
                                                }
                                                
                                                
                                                   
                                                } else {
                                                    $closeOpenTasksDeferred.reject(event.message);
                                                }
                                            });
                                        } else {
                                            $closeOpenTasksDeferred.resolve();
                                        }
                                    }
                                      }, {
                                    preUpdate: function() {
                                        window.close();
                                    }
                                }]
                            },
                            getClaimData: function(submittedValues, submittedValues2) {
                                var claimData = {
                                    status__c: "Closed",
                                    date_closed__c: moment(new Date()).utc().valueOf()
                                };
                                $.each(submittedValues, function(name, value) {
                                    claimData[name] = value;
                                });
                                $.each(submittedValues2, function(name, value) {
                                    if (name !== "Close_All_Open") {
                                        claimData[name] = value;
                                    }
                                });
                                return claimData;
                            },
                            getTransactionData: function(submittedValues, submittedValues2) {
                                $.extend(submittedValues, submittedValues2);
                                var transactionData = {
                                    approval_status__c: {
                                        value: "Approved"
                                    },
                                    claim__c: {
                                        type: "lookup",
                                        value: currentClaimId
                                    },
                                    expense_reserve_delta__c: {
                                        value: -(currentClaim.expense_outstanding__c)
                                    },
                                    indemnity_pd_reserve_delta__c: {
                                        value: -(currentClaim.indemnity_pd_outstanding__c)
                                    },
                                    medical_bi_reserve_delta__c: {
                                        value: -(currentClaim.medical_bi_outstanding__c)
                                    },
                                    name: {
                                        value: "Claim Closed Set Incurred Equal to Paid"
                                    },
                                    recordtypeid: {
                                        type: "lookup",
                                        value: claimTransactionRecordTypes.Transaction_Entry
                                    },
                                    transaction_date__c: submittedValues.date_closed__c,
                                    transaction_status__c: {
                                        value: "Closed"
                                    },
                                    type__c: {
                                        value: "Reserve"
                                    },
                                    category__c: {
                                        value: "Status Change"
                                    }
                                };

                                return [transactionData];
                            }
                        },
                        Void: {
                            formTitle: "Void Claim Form",
                            formFields: (function() {
                                var formConfig = {};
                                $.each(layoutFields.void_claim_field_set, function(fieldIndex, fieldName) {
                                    formConfig[fieldName] = rkAPI.StaticUtils.createFieldFromDescribe(fieldDescribes[fieldName]);
                                });
                                if (formConfig["void_dt__c"]) {
                                    formConfig["void_dt__c"].hasValidValue(function(currentVoidDate) {
                                        if (latestTransactionDate) {
                                            if (currentVoidDate.diff(latestTransactionDate) < 0) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }, "Void Date must be >= " + latestTransactionDate.toISOString().split("T")[0]);
                                }
                                return formConfig;
                            })(),
                            formButtonConfig: {
                                buttonLabels: ["Void Claim", "Cancel"],
                                buttonHandlers: [{
                                    postUpdate: function(submittedValues) {
                                        //TODO: Look at the VoidClaimProduct trigger and VoidClaimDelegate class and recreate that logic here
                                        //TODO: Close current window and refresh parent
                                        hideLoading();
                                        log("'Open' Claim set to 'Void'");
                                        //refreshOpener();
                                        //window.close();
                                        showCompletionScreen("This claim has been successfully voided.");
                                    }
                                      }, {
                                    preUpdate: function() {
                                        window.close();
                                    }
                                }]
                            },
                            getClaimData: function(submittedValues, submittedValues2) {
                                var claimData = {
                                    status__c: "Void",
                                    void_dt__c: moment(new Date()).utc().valueOf()
                                };
                                $.each(submittedValues, function(name, value) {
                                    claimData[name] = value;
                                });
                                $.each(submittedValues2, function(name, value) {
                                    claimData[name] = value;
                                });
                                return claimData;
                            },
                            getTransactionData: function() {
                                return [];
                            }
                        }
                    },
                    Reopen: {
                        Closed: {
                            formTitle: "Close Claim Form",
                            formFields: (function() {
                                var formConfig = {};
                                $.each(layoutFields.closed_claim_field_set, function(fieldIndex, fieldName) {
                                    formConfig[fieldName] = rkAPI.StaticUtils.createFieldFromDescribe(fieldDescribes[fieldName]);
                                });
                                if (formConfig["date_closed__c"]) {
                                    formConfig["date_closed__c"].hasValidValue(function(currentDateClosed) {
                                        if (latestTransactionDate) {
                                            if (currentDateClosed.diff(latestTransactionDate) < 0) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }, "Close Date must be >= " + latestTransactionDate.toISOString().split("T")[0]);
                                }
                                formConfig["Close_All_Open"] = new rkAPI.CheckboxBooleanField("Close All Open Tasks");
                                return formConfig;
                            })(),
                            formButtonConfig: {
                                buttonLabels: ["Close Claim", "Cancel"],
                                buttonHandlers: [{
                                    postUpdate: function(submittedValues) {
                                        showLoading("Updating Claim...");
                                        var $closeOpenTasksDeferred = $.Deferred();
                                        
                                        $closeOpenTasksDeferred.done(function() {
                                            hideLoading();
                                            log("'Reopen' Claim set to 'Closed'");
                                           
                                            if ('{!currentProfile}' != 'System Administrator' && submittedValues["Close_All_Open"].value === true){
                                            showCompletionScreen("This claim has been successfully closed. Only Open Tasks assigned to you have been Closed.");
                                            }
                                            
                                            else {
                                            showCompletionScreen("This claim has been successfully closed.");
                                            }
                                        });

                                        if (submittedValues["Close_All_Open"].value === true) {
                                            ChangeClaimStatusPopupController.closeAllOpenTasks(currentClaimId,'{!$User.Id}',  function(response, event) {
                                                if (event.status) {
                                                
                                                 if(response ==null)
                                                 {
                                                    $closeOpenTasksDeferred.resolve();
                                                } 
                                                else
                                                {
                                                  hideLoading();
                                            log("'Open' Claim set to 'Closed'");
                                            showCompletionScreen("Claim has been successfully Closed.");
                                                // showCompletionScreen("This cannot be closed.");
                                                
                                                }
                                                }else {
                                                    $closeOpenTasksDeferred.reject(event.message);
                                                }
                                            });
                                        } else {
                                            $closeOpenTasksDeferred.resolve();
                                        }
                                    }
                                    }, {
                                    preUpdate: function() {
                                        window.close();
                                    }
                                }]
                            },
                            getClaimData: function(submittedValues, submittedValues2) {
                                var claimData = {
                                    status__c: "Closed",
                                    date_closed__c: moment(new Date()).utc().valueOf()
                                };
                                $.each(submittedValues, function(name, value) {
                                    claimData[name] = value;
                                });
                                $.each(submittedValues2, function(name, value) {
                                    if (name !== "Close_All_Open") {
                                        claimData[name] = value;
                                    }
                                });
                                return claimData;
                            },
                            getTransactionData: function(submittedValues, submittedValues2) {
                                $.extend(submittedValues, submittedValues2);
                                var transactionData = {
                                    approval_status__c: {
                                        value: "Approved"
                                    },
                                    claim__c: {
                                        type: "lookup",
                                        value: currentClaimId
                                    },
                                    expense_reserve_delta__c: {
                                        value: -(currentClaim.expense_outstanding__c)
                                    },
                                    indemnity_pd_reserve_delta__c: {
                                        value: -(currentClaim.indemnity_pd_outstanding__c)
                                    },
                                    medical_bi_reserve_delta__c: {
                                        value: -(currentClaim.medical_bi_outstanding__c)
                                    },
                                    name: {
                                        value: "Claim Closed Set Incurred Equal to Paid"
                                    },
                                    recordtypeid: {
                                        type: "lookup",
                                        value: claimTransactionRecordTypes.Transaction_Entry
                                    },
                                    transaction_date__c: submittedValues.date_closed__c,
                                    transaction_status__c: {
                                        value: "Closed"
                                    },
                                    type__c: {
                                        value: "Reserve"
                                    },
                                    category__c: {
                                        value: "Status Change"
                                    }
                                };

                                return [transactionData];
                            }
                        },
                        Void: {
                            formTitle: "Void Claim Form",
                            formFields: (function() {
                                var formConfig = {};
                                $.each(layoutFields.void_claim_field_set, function(fieldIndex, fieldName) {
                                    formConfig[fieldName] = rkAPI.StaticUtils.createFieldFromDescribe(fieldDescribes[fieldName]);
                                });
                                if (formConfig["void_dt__c"]) {
                                    formConfig["void_dt__c"].hasValidValue(function(currentVoidDate) {
                                        if (latestTransactionDate) {
                                            if (currentVoidDate.diff(latestTransactionDate) < 0) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }, "Void Date must be >= " + latestTransactionDate.toISOString().split("T")[0]);
                                }
                                return formConfig;
                            })(),
                            formButtonConfig: {
                                buttonLabels: ["Void Claim", "Cancel"],
                                buttonHandlers: [{
                                    postUpdate: function(submittedValues) {
                                        //TODO: Look at the VoidClaimProduct trigger and VoidClaimDelegate class and recreate that logic here
                                        //TODO: Close current window and refresh parent
                                        hideLoading();
                                        log("'Reopen' Claim set to 'Void'");
                                        //refreshOpener();
                                        //window.close();
                                        showCompletionScreen("This claim has been successfully voided.");
                                    }
                                    }, {
                                    preUpdate: function() {
                                        window.close();
                                    }
                                }]
                            },
                            getClaimData: function(submittedValues, submittedValues2) {
                                var claimData = {
                                    status__c: "Void",
                                    void_dt__c: moment(new Date()).utc().valueOf()
                                };
                                $.each(submittedValues, function(name, value) {
                                    claimData[name] = value;
                                });
                                $.each(submittedValues2, function(name, value) {
                                    claimData[name] = value;
                                });
                                return claimData;
                            },
                            getTransactionData: function() {
                                return [];
                            }
                        }
                    },
                    Closed: {
                        Reopen: {
                            formTitle: "Reopen Claim Form",
                            formFields: (function() {
                                var formConfig = {};
                                $.each(layoutFields.reopen_claim_field_set, function(fieldIndex, fieldName) {
                                    formConfig[fieldName] = rkAPI.StaticUtils.createFieldFromDescribe(fieldDescribes[fieldName]);
                                });
                                if (formConfig["date_reopened__c"]) {
                                    formConfig["date_reopened__c"].hasValidValue(function(currentDateClosed) {
                                        if (latestTransactionDate) {
                                            if (currentDateClosed.diff(latestTransactionDate) < 0) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }, "Reopen Date must be >= " + latestTransactionDate.toISOString().split("T")[0]);
                                }
                                return formConfig;
                            })(),
                            formButtonConfig: {
                                buttonLabels: [/*"New Reserve", */"Reopen Claim", "Cancel"],
                                buttonHandlers: [/*{
                                    postUpdate: function(submittedValues) {
                                        //TODO: Create new transaction with following data:
                                        
                                            {
                                                amount__c: 0,
                                                aproval_status__c: "Approved",
                                                claim__c: currentClaimId,
                                                name: "Claim Reopen Transaction",
                                                recordtypeid: "Id of RecordType "Reserve"",
                                                transaction_date__c: date_reopened__c,
                                                transaction_status__c: "Reopen",
                                                type__c: "Reserve",
                                                category__c: "Status Change"
                                            }
                                        //TODO: CREATE NEW RESERVE TRANSACTION AND REDIRECT TO IT
                                        //TODO: Close current window and refresh parent
                                        log("'Closed' Claim set to 'Reopen'");
                                    }
                                },*/ {
                                    postUpdate: function(submittedValues) {
                                        hideLoading();
                                        log("'Closed' Claim set to 'Reopen'");
                                        showCompletionScreen("This claim has been successfully reopened.");
                                    }
                                }, {
                                    preUpdate: function() {
                                        window.close();
                                    }
                                }]
                            },
                            getClaimData: function(submittedValues, submittedValues2) {
                                var claimData = {
                                    status__c: "Closed",
                                    date_reopened__c: moment(new Date()).utc().valueOf()
                                };
                                $.each(submittedValues, function(name, value) {
                                    claimData[name] = value;
                                });
                                $.each(submittedValues2, function(name, value) {
                                    claimData[name] = value;
                                });
                                return claimData;
                            },
                            getTransactionData: function(submittedValues, submittedValues2) {
                                $.extend(submittedValues, submittedValues2);
                                var transactionData = {
                                    amount__c: {
                                        value: 0.00
                                    },
                                    approval_status__c: {
                                        value: "Approved"
                                    },
                                    claim__c: {
                                        type: "lookup",
                                        value: currentClaimId
                                    },
                                    name: {
                                        value: "Claim Reopen Transaction"
                                    },
                                    recordtypeid: {
                                        type: "lookup",
                                        value: claimTransactionRecordTypes.Reserve
                                    },
                                    transaction_date__c: submittedValues.date_reopened__c,
                                    transaction_status__c: {
                                        value: "Reopen"
                                    },
                                    type__c: {
                                        value: "Reserve"
                                    },
                                    category__c: {
                                        value: "Status Change"
                                    }
                                };

                                return [transactionData];
                            }
                        },
                        Void: {
                            formTitle: "Void Claim Form",
                            formFields: (function() {
                                var formConfig = {};
                                $.each(layoutFields.void_claim_field_set, function(fieldIndex, fieldName) {
                                    formConfig[fieldName] = rkAPI.StaticUtils.createFieldFromDescribe(fieldDescribes[fieldName]);
                                });
                                if (formConfig["void_dt__c"]) {
                                    formConfig["void_dt__c"].hasValidValue(function(currentVoidDate) {
                                        if (latestTransactionDate) {
                                            if (currentVoidDate.diff(latestTransactionDate) < 0) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }, "Void Date must be >= " + latestTransactionDate.toISOString().split("T")[0]);
                                }
                                return formConfig;
                            })(),
                            formButtonConfig: {
                                buttonLabels: ["Void Claim", "Cancel"],
                                buttonHandlers: [{
                                    postUpdate: function(submittedValues) {
                                        //TODO: Look at the VoidClaimProduct trigger and VoidClaimDelegate class and recreate that logic here
                                        //TODO: Close current window and refresh parent
                                        hideLoading();
                                        log("'Closed' Claim set to 'Void'");
                                        //refreshOpener();
                                        //window.close();
                                        showCompletionScreen("This claim has been successfully voided.");
                                    }
                                    }, {
                                    preUpdate: function() {
                                        window.close();
                                    }
                                }]
                            },
                            getClaimData: function(submittedValues, submittedValues2) {
                                var claimData = {
                                    status__c: "Void",
                                    void_dt__c: moment(new Date()).utc().valueOf()
                                };
                                $.each(submittedValues, function(name, value) {
                                    claimData[name] = value;
                                });
                                $.each(submittedValues2, function(name, value) {
                                    claimData[name] = value;
                                });
                                return claimData;
                            },
                            getTransactionData: function() {
                                return [];
                            }
                        }
                    },
                    Void: function() {
                        showErrorMessage("This Claim is already void. It cannot be changed.", {
                            label: "Close",
                            action: function() {
                                window.close();
                            }
                        });
                    }
                };
            };


            var pageBody;
        
            if (currentClaimId) {
                rkAPI.addReadyEvent("ClaimLoaded");
                rkAPI.addReadyEvent("LayoutFieldsLoaded");
                rkAPI.addReadyEvent("ClaimConfigCreated");

                //===============Page Functions===============//
                //Show Proper UI Screens
                //New Status Selector First, then next form based on the appropriate fieldset
                //Gautham: Changes made as per Task: 122049
                var buildUI = function(availableStatusValues, callback) {
               
               
           
               
               
                
               if ('{!csf}' =='')
               {
                var statusFieldValues = {};
                    $.each(availableStatusValues, function(i, value) {statusFieldValues[value] = value;});
                    var statusSelectFormConfig = {};
                    statusSelectFormConfig["status__c"] = new rkAPI.PicklistField("New Status", statusFieldValues);
                  
                 //  console.log('csf is: '+'{!csf}' );
                
                    if(availableStatusValues =='') {
                          showCompletionScreen ("You do not have the necessary permissions to change the status of this claim.");
                       }
          
                        else{        
                    
                                var selectStatusForm = new rkAPI.InlineForm("Change Claim Status", statusSelectFormConfig, "Next");
                                selectStatusForm.show(pageBody, function(submittedValues) {
                                log("SUBMITTED VALUES: ", submittedValues);
                                callback(submittedValues);
                                }, true, true);
                
                            }
               }
               else
               {
               
               
               
               
               
               
                     if('{!selfadmin}' == 'false'  && '{!preventStatusChange.Prevent_Status_Change_on_TPA_Claim__c}'  == 'true')
                {//alert("first loop");
                     showCompletionScreen1 ("Cannot change status on a TPA managed claim.");
                
                }
                
                else
                if((('{!csf}' != '') && '{!csf.Allow_Convert_to_Claim__c}'  == 'false' && '{!csf.Use_Tabbed_Interface__c}'  == 'false' && '{!csf.Allow_Close__c }'  == 'false' && '{!csf.Allow_Reopen__c}'  == 'false' && '{!csf.Allow_Void__c }'  == 'false') || ('{!csf.Use_Tabbed_Interface__c}'  == 'true'  && '{!csf.Allow_Convert_to_Claim__c}'  == 'false' &&  '{!csf.Allow_Close__c }'  == 'false' && '{!csf.Allow_Reopen__c}'  == 'false' && '{!csf.Allow_Void__c }'  == 'false'))
                {
                 //  alert("second loop"+'{!csf}');
                     showCompletionScreen1 ("You do not have the necessary permissions to change the status of this claim.");
                
                }
                
                
                
                else
                {
              //  alert("third loop");
                var accesiblePicklist = {!accessiblePicklistVal};
                console.log('accesiblePicklist '+availableStatusValues);
                
              
                
                 var listVal = [];
                $.each(availableStatusValues, function(i, value){
                        if(accesiblePicklist  != ''){
                            if(value == 'Open' && currentClaim.status__c != 'Incident') listVal.push(value);
                            else
                            if(accesiblePicklist.contains(value)) listVal.push(value);
                        }
                        else{
                            listVal.push(value);
                        }
                    });
                
                            
                    
                    
                    var statusFieldValues = {};
                    
                   // console.log('tt'+statusSelectFormConfig['status__c']);
                    
                    $.each(listVal, function(i, value) {statusFieldValues[value] = value;});
                    var statusSelectFormConfig = {};
                    statusSelectFormConfig["status__c"] = new rkAPI.PicklistField("New Status", statusFieldValues);
                  
                    console.log('accesiblePicklist '+accesiblePicklist );
                    console.log('listVal: '+listVal );
                
                    if(listVal =='' || ((listVal =='Open' && '{!csf.Allow_Close__c}'  == 'true'  && '{!csf.Allow_Convert_to_Claim__c}'  == 'false' &&  '{!csf.Use_Tabbed_Interface__c}'  == 'true' && '{!csf.Allow_Reopen__c}'  == 'false' && '{!csf.Allow_Void__c }'  == 'false'))  || ((listVal =='Open' && '{!csf.Allow_Reopen__c}'  == 'true'  && '{!csf.Allow_Convert_to_Claim__c}'  == 'false' &&  '{!csf.Use_Tabbed_Interface__c}'  == 'true' && '{!csf.Allow_Close__c}'  == 'false' && '{!csf.Allow_Void__c }'  == 'false'))|| ((listVal =='Open' && '{!csf.Allow_Close__c}'  == 'true' && '{!csf.Allow_Convert_to_Claim__c}'  == 'false')) || ((listVal =='Open' && '{!csf.Allow_Reopen__c}'  == 'true' && '{!csf.Allow_Convert_to_Claim__c}'  == 'false')) ) {
                          showCompletionScreen ("You do not have the necessary permissions to change the status of this claim.");
                       }
          
                        else{        
                    
                                var selectStatusForm = new rkAPI.InlineForm("Change Claim Status", statusSelectFormConfig, "Next");
                                selectStatusForm.show(pageBody, function(submittedValues) {
                                log("SUBMITTED VALUES: ", submittedValues);
                                callback(submittedValues);
                                }, true, true);
                
                            }
                   }
                   }
                };
                
               
                 var refreshOpener=function() 
                 {
                  // window.opener.location = document.referrer;
                //  window.opener.document.form= document.referrer;
                 //top.location.href = top.location.href;
                 // window.opener.location.href = document.referrer;
                 // location.reload(true);
                // window.history.back();
               //  window.location.reload(true);
                 // window.location = document.referrer;
                 
                 
                 if (window.opener && window.opener.postMessage) {
                    window.opener.postMessage("REFRESH PAGE NOW", "*");
                } else if (window.parent && window.parent.postMessage) {
                    window.parent.postMessage("REFRESH PAGE NOW", "*");
                }
                 
                 
                   
                 };
             
            
             
             var showCompletionScreen1 = function(completionMessage) {
                var completionContainer = $("<div/>").addClass("panel panel-primary").append(
                    $("<div/>").addClass("panel-heading").text("Change Status")
                ).append(
                    $("<div/>").addClass("panel-body").text(completionMessage)
                ).append(
                    $("<div/>").addClass("panel-footer clearfix").append(
                        $("<button/>").addClass("bootstrap-btn-mod btn-primary btn-right").text("OK").click(
                            function() {
                               window.close();
                               refreshOpener();
                               
                            }
                        )
                    )
                );

                $("#pageBody").empty().append(completionContainer);
               };
             
             
             
             
             
             
                var showCompletionScreen = function(completionMessage) {
                var completionContainer = $("<div/>").addClass("panel panel-primary").append(
                    $("<div/>").addClass("panel-heading").text("Change Status")
                ).append(
                    $("<div/>").addClass("panel-body").text(completionMessage)
                ).append(
                    $("<div/>").addClass("panel-footer clearfix").append(
                        $("<button/>").addClass("bootstrap-btn-mod btn-primary btn-right").text("OK").click(
                            function() {
                               window.close();
                               refreshOpener();
                               
                            }
                        )
                    )
                );

                $("#pageBody").empty().append(completionContainer);
               };
                
                
                //===============End Page Functions===============//

                rkAPI.onAPIReady(function(initParams) {
                    log("INIT PARAMS: ", initParams);
                    var $ = initParams.$;
                    hideErrorMessage();
                    pageBody = $("#pageBody");

                    var updateClaim = function(claimData, transactionData, callback) {
                        log("UPDATING CLAIM", claimData);
                        ChangeClaimStatusPopupController.updateClaim(objectName, claimData, transactionObjectName, transactionData, function(result, event) {
                            if (event.status) {
                                callback();
                            }
                        });
                    };

                    var firstFormConfig = screenFlowConfig[currentClaim.status__c];
                    //console.log('firstFormConfig  '+JSON.stringify(firstFormConfig));
                   // console.log('--'+currentClaim.status__c +'--'+JSON.stringify(screenFlowConfig));
                    if (typeof firstFormConfig === "function") {
                        firstFormConfig();
                    } else {
                        var validStatusPicklistValues = rkAPI.StaticUtils.getObjectKeys(firstFormConfig);
                      //  console.log('validStatusPicklistValues '+validStatusPicklistValues );
                        
                        buildUI(validStatusPicklistValues, function(submittedValues) {
                            submittedValues.id = {
                                value: currentClaimId,
                                type: "id"
                            };
                            var nextFormConfig = firstFormConfig[submittedValues["status__c"].value];
                            log("NEXT FORM CONFIG: ", nextFormConfig);
//console.log('firstFormConfig  '+submittedValues["status__c"].value);
                            var nextForm = new rkAPI.InlineForm(nextFormConfig.formTitle, nextFormConfig.formFields, nextFormConfig.formButtonConfig.buttonLabels);

                            var overriddenBtnHandlers = [];
                            $.each(nextFormConfig.formButtonConfig.buttonHandlers, function(handlerIndex, handler) {
                                var overriddenBtnHandler = function(submittedValues2) {
                                    if (handler.preUpdate) {
                                        handler.preUpdate.apply(handler.preUpdate, [submittedValues2, function() {
                                            updateClaim(nextFormConfig.getClaimData(submittedValues, submittedValues2), nextFormConfig.getTransactionData(submittedValues, submittedValues2), function() {
                                                if (handler.postUpdate) {
                                                    handler.postUpdate.apply(handler.postUpdate, [submittedValues2]);
                                                }
                                            });
                                        }]);
                                    } else {
                                        updateClaim(nextFormConfig.getClaimData(submittedValues, submittedValues2), nextFormConfig.getTransactionData(submittedValues, submittedValues2), function() {
                                            if (handler.postUpdate) {
                                                handler.postUpdate.apply(handler.postUpdate, [submittedValues2]);
                                            }
                                        });
                                    }
                                };
                                overriddenBtnHandlers.push(overriddenBtnHandler);
                            });
                            
                            nextForm.show(pageBody, overriddenBtnHandlers, false, true);
                        });
                    }

                    hideLoading();
                });

                rkAPI.initialize(controller);

                $initData1Obtained = $.Deferred();
                $initData2Obtained = $.Deferred();

                $.when($initData1Obtained, $initData2Obtained).then(function() {
                    createScreenFlowConfig();
                    rkAPI.signalReady("apiReady", "ClaimConfigCreated");
                });
                
                rkAPI.StaticUtils.query(objectName, ["Id", "Status__c", "Expense_Outstanding__c", "Indemnity_PD_Outstanding__c", "Medical_BI_Outstanding__c", "(SELECT ID, Transaction_Date__c FROM Claim_Transaction__r ORDER BY Transaction_Date__c DESC LIMIT 1)"], new rkAPI.WhereClause(new rkAPI.FieldBlock("id", "=", "'" + currentClaimId + "'")), null, null, null, function(queryResult) {
                    if (!(queryResult instanceof rkAPI.RemotingException)) {
                        currentClaim = queryResult[0];
                        if (currentClaim && currentClaim.claim_transaction__r && currentClaim.claim_transaction__r.length > 0 && currentClaim.claim_transaction__r[0].transaction_date__c) {
                            latestTransactionDate = moment(currentClaim.claim_transaction__r[0].transaction_date__c);
                        }
                        log("CURRENT RECORD: ", currentClaim);
                        rkAPI.signalReady("apiReady", "ClaimLoaded");
                        $initData1Obtained.resolve();
                    } else {
                        throw queryResult;
                    }
                });
                //console.log('rk query apu --'+JSON.stringify(rkAPI));
                controller.getLayoutFields(function(layoutFieldsResult) {
                    log("LAYOUT FIELDS: ", layoutFieldsResult);
                    layoutFields = layoutFieldsResult;
                    var allLayoutFields = ["status__c"];
                    $.each(layoutFieldsResult, function(layoutName, fields) {
                        $.each(fields, function(index, fieldName) {
                            allLayoutFields.push(fieldName);
                        });
                    });
                    rkAPI.StaticUtils.getFieldDescribes(objectName, allLayoutFields, function(describes) {
                        fieldDescribes = describes;
                        log("FIELD DESCRIBES: ", fieldDescribes);
                        rkAPI.signalReady("apiReady", "LayoutFieldsLoaded");
                        $initData2Obtained.resolve();
                    });
                });
            } else {
                error("NO TARGET CLAIM SPECIFIED");
                showErrorMessage("Missing target Claim__c record. Id of target Claim__c record must be specified in url.")
            }
        </script>
    </head>
    <body>
        <div class="container" style="margin-top: 30px">
            <div class="row">
                <div class="col-xs-12">
                    <div id="pageBody"></div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12">
                    <div id="errorMessage" class="alert alert-danger"></div>
                </div>
            </div>
        </div>
        <div id="loadingWindow" class="loadingWindow">
            <div>
                <div id="loadingWindowMsg">
                    Loading...
                </div>
                <img src="{!$Resource.ajax_loader_gif}" height="50" width="50"></img><br/>
                Please Wait...
            </div>
        </div>
    </body>
</apex:page>