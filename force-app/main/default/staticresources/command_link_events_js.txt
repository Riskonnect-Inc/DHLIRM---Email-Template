/*
 * MDU June 2010 - Script for disabling command links (and any event-aware elements like inputs, etc) in a Visualforce page during execution of a controller action,
 * 					and then re-enabling them (restoring state) after the action has completed.
 *
 * Requires: dojo_utils_js
 * Expects apex:commandLink components, not apex:commandButton!
 * */

function _commandLinkEvents() {};
_commandLinkEvents.disabledOnClickFunc = function() {return false};
_commandLinkEvents.inAction = false;
_commandLinkEvents.isSetup = false;
_commandLinkEvents.linkElementIdSet = {};
_commandLinkEvents.inputElementIdSet = {};
_commandLinkEvents.hideElementIdSet = {};
// Map of <DOM Element ID> to {container:<DOM Element Id>, message:<DOM Element Id>}, where the key always equals the "container" property of the associated value:
_commandLinkEvents.statusElementsMap = {};
// Maps element ids to their saved "rest" state objects: 
_commandLinkEvents.restStateMap = {};
// Set of element Ids for element that should have their onfocus events deferred to a later time:
_commandLinkEvents.deferElementsMap = {};

_commandLinkEvents.setInitialFocus = function(/*DOM Element Id*/ elementId)
{
	this.setupBodyOnload();
	this.initialFocusElementId = elementId;
}

_commandLinkEvents.setupBodyOnload = function()
{
	if (!this.hasSetupBodyOnload)
	{
		this.hasSetupBodyOnload = true;
		var oldOnload = window.onload;
		window.onload = function() {
			if (oldOnload)
			{
				oldOnload();
			}
			_commandLinkEvents.onBodyLoaded();
	    }
	}
}

_commandLinkEvents.onBodyLoaded = function()
{
	if (this.initialFocusElementId)
	{
		try { dojo.byId(this.initialFocusElementId).focus(); } catch(ignore) {}
	}
	this.flushOnfocusDefers();
}

_commandLinkEvents.flushOnfocusDefers = function()
{
	for (var key in this.deferElementsMap)
	{
		var deferInfo = this.deferElementsMap[key];
		if (deferInfo && dojo.byId(key))
		{
			dojo.byId(key).onfocus = deferInfo.callback;
		}
		this.deferElementsMap[key] = undefined;
	}
}

// Immediately removes the onfocus event for the given element, and puts it back in place once the document body is loaded:
_commandLinkEvents.deferOnfocusEvent = function(/*DOM Element Id*/ elementId) 
{
	this.setupBodyOnload();
	this.deferElementsMap[elementId] = {
		callback: dojo.byId(elementId).onfocus
	};
	dojo.byId(elementId).onfocus = null;
}

_commandLinkEvents.setupPage = function()
{
	if (!this.isSetup)
	{
		this.isSetup = true;
		// this should null-out all the onclick handler references we've created, on window unload:
		var oldOnUnload = window.onunload;
		window.onunload = function() {
			_commandLinkEvents._destroy();
			if (oldOnUnload)
			{
				oldOnUnload();
			}
	    }
	}
}

_commandLinkEvents.addLink = function(elId)
{
	this.linkElementIdSet[elId] = elId;
	this.setupPage();
}

_commandLinkEvents.addInput = function(elId)
{
	this.inputElementIdSet[elId] = elId;
	this.setupPage();
}

_commandLinkEvents.addHide = function(elId)
{
	this.hideElementIdSet[elId] = elId;
	this.setupPage();
}

_commandLinkEvents.registerStatusElements = function(/* Array of: {container:<DOM Element Id>, message[optional]:<DOM Element Id>}*/ statusElementsList)
{
	for (var i=0; i < statusElementsList.length; i++)
	{
		var statusDef = statusElementsList[i];
		this.statusElementsMap[statusDef.container] = {
			container: statusDef.container,
			message: (statusDef.message ? statusDef.message : (statusDef.container + "_message"))
		};
	}
	this.setupPage();
}

// null-out all onclick handlers:
_commandLinkEvents._destroy = function()
{
	for (var elId in this.restStateMap)
    {
        var el = this.restStateMap[elId];
        if (el)
        {
        	el.onclick = null;
        }
    }
	for (var elId in this.linkElementIdSet)
	{
		var el = dojo.byId(elId);
		if (el)
		{
			el.onclick = null;
		}
	}
}

_commandLinkEvents.onBeginAction = function(/*{shortMessage:<String>, longMessage[optional]:<String>, target:<DOM Element Id>}*/ instructions)
{
	if (!instructions.shortMessage)
	{
		alert("The \"shortMessage\" property is required in instructions param to method _commandLinkEvents.onBeginAction");
		return;
	}
	var shortMessage = instructions.shortMessage;
	var longMessage = instructions.longMessage ? instructions.longMessage : shortMessage;
	var firstStatusElementId = null;
	for (var key in this.statusElementsMap)
	{
		firstStatusElementId = key;
		break;
	}
	var targetElId = instructions.target;
	if (!targetElId)
	{
		// if no target is specified, then just pick the first status element we find registered:
		targetElId = firstStatusElementId;
	}
	this._activeTargetStatusInfo = targetElId ? this.statusElementsMap[targetElId] : null;
	
	this.inAction = true;
	for (var elId in this.inputElementIdSet)
	{
		var inputEl = dojo.byId(elId);
		if (inputEl)
		{
			inputEl.disabled = true;
		}
	}
	for (var elId in this.hideElementIdSet)
	{
		var hideEl = dojo.byId(elId);
		if (hideEl)
		{
			hideEl.style.display = "none";
		}
	}
	if (this._activeTargetStatusInfo)
	{
		dojo.byId(this._activeTargetStatusInfo.container).style.display = "block";
		dojo.byId(this._activeTargetStatusInfo.message).innerHTML = this.escapeHTML(longMessage);
	}
    for (var elId in this.linkElementIdSet)
    {
        var el = dojo.byId(elId);
        if (!el)
        {
            // meaning this element has rendered="false"
            continue;
        }
        //TODO: Make SURE link state is saved before modifying - is this really necessary?
        this.initLink(elId);
        el.innerHTML = this.escapeHTML(shortMessage);
//        el.onclick = null;
        el.onclick = this.disabledOnClickFunc;
        //el.className = "btnDisabled";
        dojo.html.addClass(elId, "btnDisabled");
        dojo.html.removeClass(elId, "btn");
    }
}

_commandLinkEvents.onCompleteAction = function()
{
	this.inAction = false;
	if (this._activeTargetStatusInfo)
	{
		dojo.byId(this._activeTargetStatusInfo.container).style.display = "none";
	}
	
	for (var elId in this.inputElementIdSet)
	{
		var el = dojo.byId(elId);
		var oldState = this.restStateMap[elId];
		if (el && oldState)
		{
			el.disabled = oldState.isDisabled;
		}
	}
	for (var elId in this.hideElementIdSet)
	{
		var el = dojo.byId(elId);
		var oldState = this.restStateMap[elId];
		if (el && oldState)
		{
			if (oldState.isHidden)
			{
				dojo.html.setDisplay(elId, false);
			}
			else
			{
				dojo.html.setDisplay(elId, oldState.display);
			}
		}
	}
    for (var elId in this.linkElementIdSet)
    {
        var el = dojo.byId(elId);
        var oldState = this.restStateMap[elId];
        if (el && oldState)
        {
        	el.innerHTML = oldState.innerHTML;
            el.onclick = oldState.onclick;
            if (!oldState.isDisabled)
            {
            	//el.className = "btn";
            	dojo.html.addClass(elId, "btn");
            	dojo.html.removeClass(elId, "btnDisabled");
            }
        }
    }
}

// Place this script call in the Visualforce page after all relevant elements, so that it will be called upon both initial page load, and any subsequent
// partial-page-update rerenders that rerender 1 or more of the "event-aware" elements:
_commandLinkEvents.initAll = function()
{
	for (var elId in this.linkElementIdSet)
	{
		this.initLink(elId);
	}
	for (var elId in this.inputElementIdSet)
	{
		this.initInput(elId);
	}
	for (var elId in this.hideElementIdSet)
	{
		this.initHide(elId);
	}
}

_commandLinkEvents.initLink = function(elId)
{
	var el = dojo.byId(elId);
	if (!el)
	{
		this.restStateMap[elId] = undefined;
		return;
	}
	if (!el._commandLinkEventsInitialized)
	{
		el._commandLinkEventsInitialized = true;
		// detect a disabled state by looking for "btnDisabled" in the class string:
		var isDisabled = dojo.html.hasClass(el, "btnDisabled");
		this.restStateMap[elId] = {
			//"className": isDisabled ? "btnDisabled" : "btn",
			"isDisabled": isDisabled,
			"innerHTML": el.innerHTML,
//			"onclick": isDisabled ? null : el.onclick
			"onclick": isDisabled ? this.disabledOnClickFunc : el.onclick
		}
		if (!this.inAction && isDisabled)
		{
			// if we're in a "rest" state and the link should be disabled, then we need to null-out the onclick handler:
//			el.onclick = null;
			el.onclick = this.disabledOnClickFunc;
		}
	}
}

_commandLinkEvents.initInput = function(elId)
{
	var el = dojo.byId(elId);
	if (!el)
	{
		this.restStateMap[elId] = undefined;
		return;
	}
	if (!el._commandLinkEventsInitialized)
	{
		el._commandLinkEventsInitialized = true;
		// detect a disabled state by looking for "btnDisabled" in the class string:
		var disabledAttrib = dojo.html.getAttribute(el, "disabled");
		var isDisabled = (disabledAttrib && (disabledAttrib.toLowerCase() != "false"));
		this.restStateMap[elId] = {
			"isDisabled": isDisabled
		}
		// move the disabled attribute over to a Javascript property:
		el.disabled = isDisabled;
	}
}

_commandLinkEvents.initHide = function(elId)
{
	var el = dojo.byId(elId);
	if (!el)
	{
		this.restStateMap[elId] = undefined;
		return;
	}
	if (!el._commandLinkEventsInitialized)
	{
		el._commandLinkEventsInitialized = true;
		// detect a hide state :
		var isHidden = !dojo.html.isShowing(el);
		this.restStateMap[elId] = {
			"isHidden": isHidden,
			"display": dojo.html.getStyleProperty(elId, "display")
		}
	}
}

_commandLinkEvents.escapeHTML = function(v) 
{
    if (v && v.replace)
    {
        v = v.replace(/&/g, '\&amp;');
        v = v.replace(/</g, '&lt;');
        v = v.replace(/>/g, '&gt;');
    }
    return v;
}
